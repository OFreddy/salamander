# This is a basic workflow that is automatically triggered

name: Build and Release Solution 

# Controls when the action will run. Workflow runs when push or pull to main  branch

on:
  push:
    branches:
      - main

env:
  OPENSAL_BUILD_DIR: ${{ github.workspace }}\build\
  __your_choice: 8

jobs:
  build:
    runs-on: windows-latest
    env: 
      RELEASE_TAG: ${GITHUB_REF#refs/tags/}"
      
    defaults:
      run:
        shell: pwsh

    steps:
      - name: "Determine tag"
        run: "set RELEASE_TAG=${GITHUB_REF#refs/tags/}"
    
      - name: Checkout source
        uses: actions/checkout@v4
        
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        
      - name: echo MSBuild
        run: msbuild -version          
        
#      - name: Build
#        run: |
#          cd ${{ github.workspace }}\src\vcxproj
#          .\rebuild.cmd
          
#      - name: Populate build
#        run: |
#          cd ${{ github.workspace }}\src\vcxproj
#          .\!populate_build_dir.cmd
      
#      - name: Zip artifact for deployment
#        run: Compress-Archive -Path ${{ github.workspace }}\* -Destination release.zip
#        run: |
#          powershell Compress-Archive -Path ${{ github.workspace }}\* -DestinationPath release.zip        
          
#      - name: Create Release
#        uses: actions/create-release@v1
#        id: create_release
#        with:
#          token: ${{ github.to }}
#          draft: false
#          prerelease: false
#          release_name: Release_${{ github.ref_name }}
#          tag_name: ${{ github.ref_name }}

      - name: "Create release"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: release.zip
          asset_content_type: application/zip
