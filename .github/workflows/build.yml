# This is a basic workflow that is automatically triggered

name: Build and Release Solution 

# Controls when the action will run. Workflow runs when push or pull to main  branch

on:
  push:
    branches:
      - main

env:
  OPENSAL_BUILD_DIR: ${{ github.workspace }}\build\
  __your_choice: 8
  MY_WORKFLOW_VAR: work

jobs:
  build:
    runs-on: windows-latest
    env: 
      RELEASE_TAG: ${{ github.ref_name }}
      GITHUB_SHA: ${{ github.sha }}
      
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Output Github context
        run: echo $GITHUB_CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Create SHA
        uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 6        

      - name: Output SHA
        run: echo $SHA
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}
        
      - name: Checkout source
        uses: actions/checkout@v4
        
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        
      - name: echo MSBuild
        run: | 
          if not exists ${{ env.OPENSAL_BUILD_DIR }} (mkdir ${{ env.OPENSAL_BUILD_DIR }})
          msbuild -version          
          msbuild -version >> ${{ env.OPENSAL_BUILD_DIR }}msbuild.txt
        
      - name: Build
        run: |
          cd ${{ github.workspace }}\src\vcxproj
          .\rebuild.cmd
          
#      - name: Populate build
#        run: |
#          cd ${{ github.workspace }}\src\vcxproj
#          .\!populate_build_dir.cmd

      - name: Zip artifact for deployment
        run: 7z a -tzip -mx=9 '-x!*.exp' '-x!*.lib' '-x!*.pdb' '-xr!Intermediate' release.zip ${{ env.OPENSAL_BUILD_DIR }}* 

      - name: Create release
        id: create_release
        uses: "actions/github-script@v6"
        if: false
        with:
          github-token: "${{ github.token }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG + '_' + process.env.SHA,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG + '_' + process.env.SHA,
              });

              core.exportVariable('RELEASE_ID', process.env.RELEASE_TAG + '_' + process.env.SHA);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
#        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: release.zip
          token: "${{ github.token }}"
          name: "${{ env.RELEASE_ID }}"
        
#      - name: Upload Release
#        uses: SierraSoftworks/gh-releases@v1.0.7
#        with:
#         files: release.zip
#        token: "${{ github.token }}"
#         release_tag: "${{ env.RELEASE_ID }}"

#      - name: Upload Release
#        uses: ncipollo/release-action@v1.12.0
#        with:
#          artifacts: "release.zip"
#          token: ${{ secrets.SUPERSECRET }}
          
#      - name: Upload Release Asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: "${{ github.token }}"
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          upload_url: ${{env.RELEASE_UPLOAD_URL}}
#          asset_path: ./release.zip
#          asset_name: release.zip
#          asset_content_type: application/zip
